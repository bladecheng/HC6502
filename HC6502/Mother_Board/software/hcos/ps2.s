;
; File generated by cc65 v 2.17 - Git 180bb082
;
	.fopt		compiler,"cc65 v 2.17 - Git 180bb082"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_uart_printf
	.import		_gpio_init
	.import		_gpio_write
	.import		_gpio_read
	.import		_mdelay
	.export		_ps2_process
	.export		_ps2_init
	.export		_ps2_getc
	.export		_pi
	.export		_ps2_read

.segment	"DATA"

_pi:
	.dword	$7F2000B0
	.dword	$7F2000B1
	.dword	$7F4000B0
	.dword	$7F4000B1
	.dword	$7F4000B2
	.dword	$7F4000B3
	.dword	$7F4000B4
	.dword	$7F4000B5
	.dword	$7F4000B6
	.dword	$7F4000B7

.segment	"RODATA"

L0063:
	.byte	$67,$65,$74,$20,$5B,$25,$63,$5D,$20,$5B,$25,$78,$5D,$0D,$0A,$00
L0071	:=	L0063+0
L005F:
	.byte	$67,$65,$74,$20,$30,$78,$66,$66,$0D,$0A,$00

; ---------------------------------------------------------------
; void __near__ ps2_process (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ps2_process: near

.segment	"CODE"

	jsr     decsp1
L0056:	jsr     _ps2_read
	ldy     #$00
	sta     (sp),y
	cmp     #$FF
	bne     L005C
	lda     #<(L005F)
	ldx     #>(L005F)
	jsr     pushax
	ldy     #$02
	jsr     _uart_printf
	jmp     L0056
L005C:	lda     #<(L0063)
	ldx     #>(L0063)
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$06
	jsr     _uart_printf
	jmp     L0056

.endproc

; ---------------------------------------------------------------
; void __near__ ps2_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ps2_init: near

.segment	"CODE"

	jsr     decsp1
	lda     _pi+3
	sta     sreg+1
	lda     _pi+2
	sta     sreg
	ldx     _pi+1
	lda     _pi
	jsr     pusheax
	lda     #$01
	jsr     pusha
	jsr     _gpio_init
	lda     _pi+4+3
	sta     sreg+1
	lda     _pi+4+2
	sta     sreg
	ldx     _pi+4+1
	lda     _pi+4
	jsr     pusheax
	lda     #$00
	jsr     pusha
	jsr     _gpio_init
	lda     #$00
	tay
L008E:	sta     (sp),y
	cmp     #$08
	bcs     L007E
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_pi+8)
	tay
	txa
	adc     #>(_pi+8)
	tax
	tya
	jsr     ldeaxi
	jsr     pusheax
	lda     #$00
	jsr     pusha
	jsr     _gpio_init
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L008E
L007E:	lda     _pi+3
	sta     sreg+1
	lda     _pi+2
	sta     sreg
	ldx     _pi+1
	lda     _pi
	jsr     pusheax
	lda     #$01
	jsr     pusha
	jsr     _gpio_write
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ ps2_getc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ps2_getc: near

.segment	"CODE"

	jsr     decsp1
L0068:	jsr     _ps2_read
	ldy     #$00
	sta     (sp),y
	cmp     #$FF
	beq     L0068
	lda     #<(L0071)
	ldx     #>(L0071)
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$06
	jsr     _uart_printf
	ldx     #$00
	lda     (sp,x)
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ ps2_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ps2_read: near

.segment	"CODE"

	jsr     decsp1
	lda     #$00
	jsr     pusha
	lda     _pi+3
	sta     sreg+1
	lda     _pi+2
	sta     sreg
	ldx     _pi+1
	lda     _pi
	jsr     pusheax
	lda     #$00
	jsr     pusha
	jsr     _gpio_write
	lda     #$64
	jsr     pusha0
	jsr     _mdelay
L003D:	lda     _pi+4+3
	sta     sreg+1
	lda     _pi+4+2
	sta     sreg
	ldx     _pi+4+1
	lda     _pi+4
	jsr     pusheax
	jsr     _gpio_read
	cmp     #$01
	bne     L003D
	lda     #$00
	ldy     #$01
L0091:	sta     (sp),y
	cmp     #$08
	bcs     L0045
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	ldy     #$03
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_pi+8)
	tay
	txa
	adc     #>(_pi+8)
	tax
	tya
	jsr     ldeaxi
	jsr     pusheax
	jsr     _gpio_read
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (sp),y
	tay
	lda     ptr1
	ldx     ptr1+1
	jsr     aslaxy
	jsr     tosorax
	ldy     #$00
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	jmp     L0091
L0045:	lda     _pi+3
	sta     sreg+1
	lda     _pi+2
	sta     sreg
	ldx     _pi+1
	lda     _pi
	jsr     pusheax
	lda     #$01
	jsr     pusha
	jsr     _gpio_write
	ldx     #$00
	lda     (sp,x)
	jmp     incsp2

.endproc

